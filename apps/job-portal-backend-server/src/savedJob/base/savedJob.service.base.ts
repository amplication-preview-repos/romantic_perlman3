/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  SavedJob as PrismaSavedJob,
  Job as PrismaJob,
  User as PrismaUser,
} from "@prisma/client";

export class SavedJobServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.SavedJobCountArgs, "select">): Promise<number> {
    return this.prisma.savedJob.count(args);
  }

  async savedJobs<T extends Prisma.SavedJobFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.SavedJobFindManyArgs>
  ): Promise<PrismaSavedJob[]> {
    return this.prisma.savedJob.findMany<Prisma.SavedJobFindManyArgs>(args);
  }
  async savedJob<T extends Prisma.SavedJobFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.SavedJobFindUniqueArgs>
  ): Promise<PrismaSavedJob | null> {
    return this.prisma.savedJob.findUnique(args);
  }
  async createSavedJob<T extends Prisma.SavedJobCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SavedJobCreateArgs>
  ): Promise<PrismaSavedJob> {
    return this.prisma.savedJob.create<T>(args);
  }
  async updateSavedJob<T extends Prisma.SavedJobUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SavedJobUpdateArgs>
  ): Promise<PrismaSavedJob> {
    return this.prisma.savedJob.update<T>(args);
  }
  async deleteSavedJob<T extends Prisma.SavedJobDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.SavedJobDeleteArgs>
  ): Promise<PrismaSavedJob> {
    return this.prisma.savedJob.delete(args);
  }

  async getJob(parentId: string): Promise<PrismaJob | null> {
    return this.prisma.savedJob
      .findUnique({
        where: { id: parentId },
      })
      .job();
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.savedJob
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
