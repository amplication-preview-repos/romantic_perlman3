/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { SavedJob } from "./SavedJob";
import { SavedJobCountArgs } from "./SavedJobCountArgs";
import { SavedJobFindManyArgs } from "./SavedJobFindManyArgs";
import { SavedJobFindUniqueArgs } from "./SavedJobFindUniqueArgs";
import { CreateSavedJobArgs } from "./CreateSavedJobArgs";
import { UpdateSavedJobArgs } from "./UpdateSavedJobArgs";
import { DeleteSavedJobArgs } from "./DeleteSavedJobArgs";
import { Job } from "../../job/base/Job";
import { User } from "../../user/base/User";
import { SavedJobService } from "../savedJob.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => SavedJob)
export class SavedJobResolverBase {
  constructor(
    protected readonly service: SavedJobService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "SavedJob",
    action: "read",
    possession: "any",
  })
  async _savedJobsMeta(
    @graphql.Args() args: SavedJobCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [SavedJob])
  @nestAccessControl.UseRoles({
    resource: "SavedJob",
    action: "read",
    possession: "any",
  })
  async savedJobs(
    @graphql.Args() args: SavedJobFindManyArgs
  ): Promise<SavedJob[]> {
    return this.service.savedJobs(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => SavedJob, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "SavedJob",
    action: "read",
    possession: "own",
  })
  async savedJob(
    @graphql.Args() args: SavedJobFindUniqueArgs
  ): Promise<SavedJob | null> {
    const result = await this.service.savedJob(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SavedJob)
  @nestAccessControl.UseRoles({
    resource: "SavedJob",
    action: "create",
    possession: "any",
  })
  async createSavedJob(
    @graphql.Args() args: CreateSavedJobArgs
  ): Promise<SavedJob> {
    return await this.service.createSavedJob({
      ...args,
      data: {
        ...args.data,

        job: args.data.job
          ? {
              connect: args.data.job,
            }
          : undefined,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SavedJob)
  @nestAccessControl.UseRoles({
    resource: "SavedJob",
    action: "update",
    possession: "any",
  })
  async updateSavedJob(
    @graphql.Args() args: UpdateSavedJobArgs
  ): Promise<SavedJob | null> {
    try {
      return await this.service.updateSavedJob({
        ...args,
        data: {
          ...args.data,

          job: args.data.job
            ? {
                connect: args.data.job,
              }
            : undefined,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SavedJob)
  @nestAccessControl.UseRoles({
    resource: "SavedJob",
    action: "delete",
    possession: "any",
  })
  async deleteSavedJob(
    @graphql.Args() args: DeleteSavedJobArgs
  ): Promise<SavedJob | null> {
    try {
      return await this.service.deleteSavedJob(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Job, {
    nullable: true,
    name: "job",
  })
  @nestAccessControl.UseRoles({
    resource: "Job",
    action: "read",
    possession: "any",
  })
  async getJob(@graphql.Parent() parent: SavedJob): Promise<Job | null> {
    const result = await this.service.getJob(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(@graphql.Parent() parent: SavedJob): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
